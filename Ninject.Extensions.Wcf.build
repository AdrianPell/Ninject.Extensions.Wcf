<?xml version="1.0" encoding="utf-8"?>
<project name="Ninject" default="build">
	<property name="version" value="0.0.0.0" overwrite="true"/>
	<property name="product.name" value="Ninject.Extensions.Wcf" overwrite="false"/>
	<property name="product.company" value="Ninject Project Contributors" overwrite="false"/>
	<property name="product.duration" value="2009-2012" overwrite="false"/>
	<property name="product.description" value="WCF Extension for Ninject" overwrite="false"/>
	<property name="product.platforms" value="net-3.5,net-4.0,net-4.5,mono-3.5,mono-4.0"  overwrite="false"/>
	<property name="product.buildserverPlatforms" value="net-3.5,net-4.0,mono-3.5,mono-4.0"  overwrite="false"/>
	<property name="dependencies" value="Ninject,Ninject.Web.Common" overwrite="false"/>

	<include buildfile="Ninject.include" />
	<target name="all" depends="core csl selfhost"/>
	<target name="nuget-all" depends="nuget nuget-selfhost nuget-webhost"/>

	<target name="core" depends="init">
		<copy todir="${current.path.build}/lib" if="${build.platform == 'net-3.5'}">
			<fileset basedir="${path.lib}/DataServices/${build.platform}">
				<include name="**/*.dll"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
		<csc noconfig="true" warnaserror="true" target="library" debug="${build.debug}" optimize="${build.optimize}" define="${build.defines}" output="${current.path.build}/${product.assembly}" doc="${current.path.build}/${product.docfile}" keyfile="${path.src}/${product.keyfile}">
			<arg line="/filealign:512"/>
      <arg value="-sdk:2" if="${string::contains(build.platform, 'mono-3.5')}"/>
      <arg value="-sdk:4" if="${string::contains(build.platform, 'mono-4.0')}"/>
			<sources basedir="${path.src}">
				<include name="${build.asminfo}"/>
				<include name="${product.name}/**/*.cs"/>
			</sources>
			<references>
				<include name="mscorlib.dll"/>
				<include name="System.dll"/>
				<include name="System.ServiceModel.dll"/>
				<include name="System.ServiceModel.Activation.dll"/>
				<include name="System.ServiceModel.Web.dll"/>
				<include name="System.Web.dll"/>
				<include name="System.Core.dll"/>
				<include name="System.Data.Services.dll"/>
				<include name="System.Configuration.dll"/>
				<include name="${path.lib}/Ninject/${build.platform}/Ninject.dll"/>
				<include name="${path.lib}/Ninject.Web.Common/${build.platform}/Ninject.Web.Common.dll"/>
			</references>
		</csc>
	</target>
	
	<target name="csl" depends="init core">
		<property name="current.path.build.extensions" value="${path.build}/${build.platform}/${build.config}/extensions"/>
		<mkdir dir="${current.path.build.extensions}" if="${not(directory::exists(current.path.build.extensions))}"/>

		<csc noconfig="true" warnaserror="true" target="library" debug="${build.debug}" optimize="${build.optimize}" define="${build.defines}" output="${current.path.build.extensions}/Ninject.Extensions.Wcf.CommonServiceLocator.dll">
			<arg line="/filealign:512"/>
      <arg value="-sdk:2" if="${string::contains(build.platform, 'mono-3.5')}"/>
      <arg value="-sdk:4" if="${string::contains(build.platform, 'mono-4.0')}"/>
			<sources basedir="${path.src}">
				<include name="${build.asminfo}"/>
				<include name="Ninject.Extensions.Wcf.CommonServiceLocator/**/*.cs"/>
			</sources>
			<references basedir="${current.path.build}">
				<include name="mscorlib.dll"/>
				<include name="System.dll"/>
				<include name="System.ServiceModel.dll"/>
				<include name="System.ServiceModel.Activation.dll"/>
				<include name="System.Web.dll"/>
				<include name="System.Core.dll"/>
				<include name="${path.packages}/CommonServiceLocator.*/lib/NET35/Microsoft.Practices.ServiceLocation.dll"/>
			</references>
		</csc>
	</target>	
	
	<target name="selfhost" depends="init core">
		<property name="current.path.build.extensions" value="${path.build}/${build.platform}/${build.config}/extensions"/>
		<mkdir dir="${current.path.build.extensions}" if="${not(directory::exists(current.path.build.extensions))}"/>
		
		<csc noconfig="true" warnaserror="true" target="library" debug="${build.debug}" optimize="${build.optimize}" define="${build.defines}" 
		output="${current.path.build}/${product.name}.SelfHost.dll" doc="${current.path.build}/${product.name}.SelfHost.xml" keyfile="${path.src}/${product.keyfile}">
			<arg line="/filealign:512"/>
      <arg value="-sdk:2" if="${string::contains(build.platform, 'mono-3.5')}"/>
      <arg value="-sdk:4" if="${string::contains(build.platform, 'mono-4.0')}"/>
			<sources basedir="${path.src}">
				<include name="${build.asminfo}"/>
				<include name="${product.name}.SelfHost/**/*.cs"/>
			</sources>
			<references basedir="${current.path.build}">
				<include name="mscorlib.dll"/>
				<include name="System.dll"/>
				<include name="System.Web.dll"/>
				<include name="System.Core.dll"/>
				<include name="System.Data.dll"/>
				<include name="System.Data.Services.dll"/>
				<include name="System.ServiceModel.dll"/>
				<include name="System.ServiceModel.Activation.dll"/>
				<include name="System.ServiceModel.Web.dll"/>
				<include name="System.Configuration.dll"/>
				<include name="${path.lib}/Ninject/${build.platform}/Ninject.dll"/>
				<include name="${path.lib}/Ninject.Web.Common/${build.platform}/Ninject.Web.Common.dll"/>
				<include name="${path.lib}/Ninject.Web.Common/${build.platform}/Ninject.Web.Common.SelfHost.dll"/>
				<include name="${current.path.build}/${product.assembly}"/>
			</references>
		</csc>
	</target>	

	<target name="compile-tests" depends="core" unless="${skip.tests}" if="${not(string::contains(build.platform, 'silverlight') or build.platform == 'netcf-3.5')}">
		<mkdir dir="${current.path.test}"/>
		<call target="CopyDefaultTestInfrastructureAssemblies"/>

		<csc noconfig="true" warnaserror="true" target="library" debug="${build.debug}" optimize="${build.optimize}" define="${build.defines}"
		 output="${current.path.test}/${product.assembly.test}">
      <arg value="-sdk:2" if="${string::contains(build.platform, 'mono-3.5')}"/>
      <arg value="-sdk:4" if="${string::contains(build.platform, 'mono-4.0')}"/>
			<sources basedir="${path.src}">
				<include name="${product.name}.Test/**/*.cs"/>
			</sources>
			<references basedir="${current.path.test}">
				<include name="mscorlib.dll"/>
				<include name="System.dll"/>
				<include name="System.ServiceModel.dll"/>
				<include name="System.Web.dll"/>
				<include name="System.Core.dll"/>
				<include name="Moq.dll"/>
				<include name="xunit.dll"/>
				<include name="${product.assembly}"/>
				<include name="${path.lib}/Ninject/${build.platform}/Ninject.dll"/>
				<include name="${path.lib}/Ninject.Web.Common/${build.platform}/Ninject.Web.Common.dll"/>
				<include name="${path.lib}/Ninject.Extensions.ContextPreservation/${build.platform}/Ninject.Extensions.ContextPreservation.dll"/>
			</references>
			<nowarn>
				<warning number="1584"/>
			</nowarn>
		</csc>
	</target>
	
	<target name="compile-silverlight-tests" depends="core" unless="${skip.tests or skip.silverlightTests}" if="${string::contains(build.platform, 'silverlight')}">
		<mkdir dir="${current.path.test}"/>
		<call target="CopyDefaultTestInfrastructureAssemblies-SL"/>
		
		<csc noconfig="true" warnaserror="true" target="library" debug="${build.debug}" optimize="${build.optimize}" define="${build.defines}"
		 output="${current.path.test}/${product.assembly.silverlighttestdll}">
			<sources basedir="${path.src}">
				<include name="${product.name}.Test/**/*.cs"/>
				<include name="${product.name}.SilverlightTests/*.cs"/>
				<exclude name="${product.name}.Test/MSTestAttributes/*.cs"/>
			</sources>
			<references basedir="${current.path.test}">
				<include name="mscorlib.dll"/>
				<include name="System.dll"/>
				<include name="System.ServiceModel.dll"/>
				<include name="System.Web.dll"/>
				<include name="System.Core.dll"/>
				<include name="System.Windows.dll"/>
				<include name="System.Windows.Browser.dll"/>
				<include name="System.Net.dll"/>
				<include name="Microsoft.Phone.dll" if="${string::contains(build.platform, 'wp7')}"/>
				<include name="Microsoft.Phone.Interop.dll" if="${string::contains(build.platform, 'wp7')}"/>
				<include name="Moq.Silverlight.dll" unless="${string::contains(build.platform, 'wp7')}"/>
				<include name="Castle.Core.dll" if="${string::contains(build.platform, 'silverlight-4.0') or string::contains(build.platform, 'silverlight-5.0')}"/>
				<include name="Castle.Core-Silverlight.dll" unless="${string::contains(build.platform, 'silverlight-4.0') or string::contains(build.platform, 'silverlight-5.0')}"/>
				<include name="Castle.DynamicProxy-Silverlight.dll" unless="${build.platform == 'silverlight-4.0' or build.platform == 'silverlight-5.0'}"/>
				<include name="xunit.runner.silverlight.dll"/>
				<include name="xunit-silverlight.dll"/>
				<include name="${product.assembly}"/>
				<include name="${path.lib}/Ninject/${build.platform}/Ninject.dll"/>
				<include name="${path.lib}/Ninject.Extensions.ContextPreservation/${build.platform}/Ninject.Extensions.ContextPreservation.dll"/>
			</references>
			<nowarn>
				<warning number="1584"/>
			</nowarn>
		</csc>
		<zip zipfile="${current.path.test}/${product.assembly.silverlighttest}">
			<fileset basedir="${current.path.test}">
				<include name="*.dll" />
			</fileset>
			<fileset basedir="${path.src}/${product.name}.SilverlightTests">
				<include name="AppManifest.xaml" if="${string::contains(build.platform, 'silverlight-4.0')}"/>
			</fileset>
			<fileset basedir="${path.src}/${product.name}.SilverlightTests/Silverlight3">
				<include name="AppManifest.xaml" unless="${string::contains(build.platform, 'silverlight-4.0')}"/>
			</fileset>
		</zip>
	</target>
	
	<target name="nuget-selfhost">
		<property name="nuget.sourcedir" value="${path.base}/nuget-selfhost" />
		<property name="nuget.basedir" value="${path.base}/build/nuget-selfhost" />
		<property name="nuget.platforms" value="${product.platforms}" />
		<property name="nuget.name" value="${product.name}.Selfhost" />
		<property name="nuget.releaseDirectory" value="${path.build}\${build.platform}\release" dynamic="true"/>
		<property name="nuget.dependencies" value="${product.name}" />
		<property name="nuget.additionalFiles" value="-" />
		<property name="nuget.packageName" value="${nuget.name}${product.packagePostfix}" />	
		<property name="nuget.symbol.basedir" value="${path.base}/build/nuget-selfhost_symbol" />
		<property name="nuget.project" value="${path.src}/${product.name}.Selfhost/${product.name}.Selfhost.csproj" />
		
		<property name="nant.settings.currentframework" value="net-4.0"/>
		<msbuild project="${nuget.project}" />
		<call target="nuget-run"/>
	</target>	
	
	<target name="nuget-webhost">
		<property name="nuget.sourcedir" value="${path.base}/nuget-webhost" />
		<property name="nuget.basedir" value="${path.base}/build/nuget-webhost" />
		<property name="nuget.platforms" value="" />
		<property name="nuget.name" value="${product.name}.WebHost" />
		<property name="nuget.dependencies" value="${product.name}" />
		<property name="nuget.additionalFiles" value="-" />
		<property name="nuget.packageName" value="${nuget.name}${product.packagePostfix}" />	
		<property name="nuget.symbol.basedir" value="" />
		<property name="nuget.project" value="" />
		
		<property name="nant.settings.currentframework" value="net-4.0"/>
		<call target="nuget-run"/>
	</target>	
</project>